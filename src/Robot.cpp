// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"
#include <iostream>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<Drivetrain> Robot::drivetrain;
std::shared_ptr<Elevator> Robot::elevator;
std::shared_ptr<CubeIntake> Robot::cubeIntake;
std::unique_ptr<OI> Robot::oi;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	drivetrain.reset(new Drivetrain());
	elevator.reset(new Elevator());
	cubeIntake.reset(new CubeIntake());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());

	// Add commands to Autonomous Sendable Chooser
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS


	chooser.AddDefault("Autonomous Command", new AutonomousCommand());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	frc::SmartDashboard::PutData("Auto Modes", &chooser);

	// Create the gameDataTimer object.
	gameDataTimer = new frc::Timer();

	// Set gameData to blank so our check in autoInit works properly.
	gameData.assign("");

	// Set how long to wait in seconds for gameData to be received before giving up.
	// Note: Set this to be 1 second less than the difference between your longest autonomous mode
	// and the 15 seconds in autonomous. eg; scale auto for far side takes 12 seconds, set this to 2.0
	// 15 - 12 - 1 = 2
	// Set this to be 0 if you don't want to wait
	// This is a double so you can use fractions of a second in decimal for fine grained control.
	gameDataTimeout = 0;
}

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){
}

void Robot::DisabledPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
	// To ensure we attempt at least once even if the timeout is 0.0, grab the gameData.
	this->gameData = DriverStation::GetInstance().GetGameSpecificMessage();

	// Start the timer for how long to wait for gameData to be received from FMS.
	this->gameDataTimer->Reset();
	this->gameDataTimer->Start();

	// We can either loop here until we get gameData that is not empty or we timeout, or we can use
	// the auto periodic call to do ensure we have data. This example will document the former.
	// contact firstmn.csa@gmail.com for the latter if you want to see the difference.

	// Loop until we can valid gameData or we timeout. Use Double.compare to ensure we do double checking properly.
	while (this->gameData != "" && (this->gameDataTimer->Get() <= this->gameDataTimeout)) {
		// Try to get gameData again.
		this->gameData = DriverStation::GetInstance().GetGameSpecificMessage();

		// If needed, delay a bit before possibly checking again.
		if (this->gameData == "") {
			std::this_thread::sleep_for(std::chrono::milliseconds(20));
		}
	}

	// Check if gameData is still empty, if so, then we timed out and need to either call a default autonomous command, or set gameData to something
	// that can signal we didn't receive gameData in time and act accordingly.
	if (this->gameData == "") {
		std::cout << "autonomousInit: Game Data not received before timeout, using autonomous command fallback: AutonoumousCommand" << std::endl;
		autonomousCommand = new AutonomousCommand();
	}
	else {
		// We have gameData, select the automode from the chooser, or add your auto selection code here knowing you have
		// gameData.
		autonomousCommand = chooser.GetSelected();
	}

	// Schedule the autonomous command (example)
	if (autonomousCommand != nullptr)
		autonomousCommand->Start();

	// Shutdown the gameDataTimer now that we are done with it.
	this->gameDataTimer->Stop();
}

void Robot::AutonomousPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand != nullptr)
		autonomousCommand->Cancel();
}

void Robot::TeleopPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

START_ROBOT_CLASS(Robot);
