// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
#include "ctre/Phoenix.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<WPI_TalonSRX> RobotMap::drivetrainleftFront;
std::shared_ptr<WPI_TalonSRX> RobotMap::drivetrainleftRear;
std::shared_ptr<frc::SpeedControllerGroup> RobotMap::drivetrainleftDrive;
std::shared_ptr<WPI_TalonSRX> RobotMap::drivetrainrightFront;
std::shared_ptr<WPI_TalonSRX> RobotMap::drivetrainrightRear;
std::shared_ptr<frc::SpeedControllerGroup> RobotMap::drivetrainrightDrive;
std::shared_ptr<frc::DifferentialDrive> RobotMap::drivetrainDifferentialDrive;
std::shared_ptr<frc::Ultrasonic> RobotMap::drivetrainfrontUltrasonic;
std::shared_ptr<frc::Ultrasonic> RobotMap::drivetrainRearUltrasonic;
std::shared_ptr<WPI_TalonSRX> RobotMap::elevatorelevatorMotor;
std::shared_ptr<frc::DigitalInput> RobotMap::elevatorvaultPosSwitch;
std::shared_ptr<frc::DigitalInput> RobotMap::elevatorlowSwitchPosSwitch;
std::shared_ptr<frc::DigitalInput> RobotMap::elevatorhighSwitchPosSwitch;
std::shared_ptr<frc::DigitalInput> RobotMap::elevatorlowScalePosSwitch;
std::shared_ptr<frc::DigitalInput> RobotMap::elevatorhighScalePosSwitch;
std::shared_ptr<frc::DigitalInput> RobotMap::elevatorliftPointPosSwitch;
std::shared_ptr<frc::AnalogPotentiometer> RobotMap::elevatorposition_pot;
std::shared_ptr<WPI_TalonSRX> RobotMap::cubeIntakeleft_intake;
std::shared_ptr<WPI_TalonSRX> RobotMap::cubeIntakeright_intake;
std::shared_ptr<frc::DigitalInput> RobotMap::cubeIntakecubeInTrigger;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    frc::LiveWindow *lw = frc::LiveWindow::GetInstance();

    drivetrainleftFront.reset(new WPI_TalonSRX(6));
    
    
    drivetrainleftRear.reset(new WPI_TalonSRX(8));
    
    
    drivetrainleftDrive = std::make_shared<frc::SpeedControllerGroup>(*drivetrainleftFront, *drivetrainleftRear  );
    lw->AddActuator("Drivetrain", "leftDrive", drivetrainleftDrive);
    
    drivetrainrightFront.reset(new WPI_TalonSRX(9));
    
    
    drivetrainrightRear.reset(new WPI_TalonSRX(5));
    
    
    drivetrainrightDrive = std::make_shared<frc::SpeedControllerGroup>(*drivetrainrightFront, *drivetrainrightRear  );
    lw->AddActuator("Drivetrain", "rightDrive", drivetrainrightDrive);
    
    drivetrainDifferentialDrive.reset(new frc::DifferentialDrive(*drivetrainleftDrive, *drivetrainrightDrive));
    lw->AddActuator("Drivetrain", "Differential Drive", drivetrainDifferentialDrive);
    drivetrainDifferentialDrive->SetSafetyEnabled(true);
        drivetrainDifferentialDrive->SetExpiration(0.1);
        drivetrainDifferentialDrive->SetMaxOutput(1.0);

    drivetrainfrontUltrasonic.reset(new frc::Ultrasonic(0, 1));
    lw->AddSensor("Drivetrain", "frontUltrasonic", drivetrainfrontUltrasonic);
    
    drivetrainRearUltrasonic.reset(new frc::Ultrasonic(2, 3));
    lw->AddSensor("Drivetrain", "RearUltrasonic", drivetrainRearUltrasonic);
    
    elevatorelevatorMotor.reset(new WPI_TalonSRX(13));
    
    
    elevatorvaultPosSwitch.reset(new frc::DigitalInput(4));
    lw->AddSensor("Elevator", "vaultPosSwitch", elevatorvaultPosSwitch);
    
    elevatorlowSwitchPosSwitch.reset(new frc::DigitalInput(5));
    lw->AddSensor("Elevator", "lowSwitchPosSwitch", elevatorlowSwitchPosSwitch);
    
    elevatorhighSwitchPosSwitch.reset(new frc::DigitalInput(6));
    lw->AddSensor("Elevator", "highSwitchPosSwitch", elevatorhighSwitchPosSwitch);
    
    elevatorlowScalePosSwitch.reset(new frc::DigitalInput(8));
    lw->AddSensor("Elevator", "lowScalePosSwitch", elevatorlowScalePosSwitch);
    
    elevatorhighScalePosSwitch.reset(new frc::DigitalInput(9));
    lw->AddSensor("Elevator", "highScalePosSwitch", elevatorhighScalePosSwitch);
    
    elevatorliftPointPosSwitch.reset(new frc::DigitalInput(10));
    lw->AddSensor("Elevator", "liftPointPosSwitch", elevatorliftPointPosSwitch);
    
    elevatorposition_pot.reset(new frc::AnalogPotentiometer(1, 1.0, 0.0));
    lw->AddSensor("Elevator", "position_pot", elevatorposition_pot);
    
    cubeIntakeleft_intake.reset(new WPI_TalonSRX(10));
    
    
    cubeIntakeright_intake.reset(new WPI_TalonSRX(11));
    
    
    cubeIntakecubeInTrigger.reset(new frc::DigitalInput(12));
    lw->AddSensor("CubeIntake", "cubeInTrigger", cubeIntakecubeInTrigger);
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
